// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW0W/jtg/+VwT19/Ab4MRpdwMOGQYsu+uCYMXdgN2e1qJQbdrm1ZZ0Et3UKPK/D5Sd",
	"xnZctAPaPe2pCkl9JMWPn/sgE1NZo0GTl8sH6ZMCKhWOK2uv17Rtrj/CHSbAJuuMBUcIIUARqaSAlM8p",
	"+MShJTRaLg+eSFbq/gJ0ToVcvl9EskK9/3kaSUIqYRhPjWWLJ4c6l7toiDxOVBqdi55JZAjlKO3p4uzd",
	"U4n7aJO5ufMZTrR4gfpWkBFtiOxD7u88CXidO1Nbfwz6pQBRoidhsg5YdKGRRIIqXDkCHWV+vNEFKudU",
	"IyNZa/xWw6aFIVcD14PelqqZaVXBcTmdV7CXe609CNRi/edGGCc+XGxeOt9BmolnwQrwOH2wvjBDF3uM",
	"bCdw7YtR7RSmx+oakwTflPi7SDr4VqPj/fpLgiZw1qEPzLp6DDc3XyEhrmq0rk+wi4wVJdxBKZS1IlcE",
	"W9V0XPMiMZoUanAyGu16+hToRUfXCbg+af/nIJNLeRIf5CbutCYeC02P0szWsft5YkfyfnYLjeeHO6zj",
	"1a4HvLJ2xqCzj4+1jl6Uo1FnhqsP75IQH6FSWDI1dGZ+Nha0Btoad4s6nxuXy0i2uyQ/W9Di06NT/Gpq",
	"napOaWrHGAWR9cs4noAZC588ORG/qOSWl1unl/pS8zRXQAU4sbK2xCRgi3U3g/+v1t+J1e8bYZ25wxS8",
	"UKLWmCGkwZwZJ24MFWHmzpRC6VRUQA4Tz/OkA7wtFWXGVfMu6Vqg38sT31K99JlJag9pJECrm5L7ZqB+",
	"RMrsY2qxomBlS6hAk0BNUJaY83lfksn2Jbxbxz+s2a4hIbxDaoQHFyYXiW2BJQh148mphDinNxWI0mxn",
	"LdVRc1sqQQitBbD5Jc+hxAS0D9LXjW1leSFnZ/PFYEzLON5ut3MVvDyhuLvq44vNh/NPf5yHK32GPTkb",
	"Gck7cL6d6+l80d5jEiiLcim/D6ZIWkVFWJ5YBaxYWTvLadvEBzXw8cNAGnaxR2Ir/wm/e5ubQ6AwP34o",
	"aJPKpVwDHXbAgbeGu+K4s8ViT37Q4WZvjvFX336Q2y3+hzvu2/0aUnx9/kV8/k1wWnb6uqqUazrHsz1P",
	"tBxJUnlQAXm14/d0qgICx6ZBXwT3FNtSof5RJIVyHuinmrLZ+2GDY4k+6uAWGjGqjUWQXTzMgzgM5bwv",
	"9e2H+e2q2z/SdF2d97gifr/XoGH88CjIu+cp+S8y8vUJ+Vz3/7Hz1dj5hhUNBjZRU//f/aOd2e3+DgAA",
	"//9QXdCyYA0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
