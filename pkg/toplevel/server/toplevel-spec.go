// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/types"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/types"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
